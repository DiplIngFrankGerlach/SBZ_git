


int ZKNuetzlich::istLeerzeichen(char c)
{
   switch( cast(int,c) )
   {
       case 32:
       case 9:
       case 10:
       case 13:
          { return 1; };
       break;
       default:
          { return 0; };
   }
   return 0;//wird nie erreicht, Compiler will aber ein return sehen 
}


int ZKNuetzlich::istZiffer(char z)
{
   switch(z)
   {
       case '0':
       case '1':
       case '2':
       case '3':
       case '4':
       case '5':
       case '6':
       case '7':
       case '8':
       case '9':{ return 1;};break;
   }
   return 0;
}


void ZKNuetzlich::wandle(longlong zahl,int basis,&String_16 ziel)
{
   var longlong llNull = cast(longlong,0);
   var int istNegativ = 0;
   if( zahl < llNull) 
   {
      zahl = zahl * cast(longlong,-1);
      istNegativ = 1;
   }

   if(basis > 36 ) 
   {
       ziel.append("BasisTooBig");
       return ;
   }
  

   if(  zahl < llNull)
   {
       ziel.append("tooBig");
       return ;
   }

   var int z0 = cast(int,'0');
   var int zA = cast(int,'A');

   var char puffer[66];
   var int stelle = 0;
   if( (stelle == 0) && (zahl == llNull) )
   {
       puffer[0] = '0';
       stelle++;
   }
   while( zahl > llNull )
   {
       var int ziffer = cast(int,zahl % basis); 

       if( ziffer < 10 )
       {
	   puffer[stelle] = cast(char,(ziffer+z0));
       }
       else
       {
	   puffer[stelle] = cast(char,((ziffer - 10)+zA)) ;
       }
       zahl = zahl / basis;
       stelle++; 
   }
   ziel.ensureCapacity(ziel.length() + stelle + 1); 
   if( istNegativ )
   {
       ziel.append('-');
   }
   for(var int i=stelle - 1;  i >=0; i=i - 1)
   {
       ziel.append(puffer[i]);
   }
}


void ZKNuetzlich::appendInAnfz(&String_16 zk,int x)
{
    zk.append('"');
    zk.append(x);
    zk.append('"');
}





void ZKNuetzlich::UnitTest(&int ergebnisUT)
{
 var PrintfClass pfc;
 var String_16 s("123444443232222");
 var longlong ergebnis;
 ZKNuetzlich::strNachLonglong(s,ergebnis);

 var longlong vergleich;
 vergleich = cast(longlong,123444);
 vergleich = vergleich * 1000000000;
 vergleich = vergleich +  443232222; 

 if(ergebnis != vergleich)
 {
    pfc.fstr("ZKNuetzlich::UnitTest() 1 failed").pr();
    ergebnisUT =  -1;
    return;
 }
 s.assign("1");
 ZKNuetzlich::strNachLonglong(s,ergebnis);
 vergleich = cast(longlong,1);
 if(ergebnis != vergleich)
 {
    pfc.fstr("ZKNuetzlich::UnitTest() 2 failed").pr();
    ergebnisUT = -1;
    return;
 }
 s.assign("1000000000000");
 ZKNuetzlich::strNachLonglong(s,ergebnis);
 vergleich = cast(longlong,1000000000);
 vergleich = vergleich * 1000;
 if(ergebnis != vergleich)
 {
    pfc.fstr("ZKNuetzlich::UnitTest() 3 failed").pr();
    ergebnisUT = -1;
    return;
 }
 pfc.fstr("ZKNuetzlich::UnitTest erfolgreich").pr();
 ergebnisUT = 1;
}
 
void ZKNuetzlich::strNachLonglong(&String_16 eingabe,&longlong ausgabe)
{
     ausgabe = cast(longlong,0);
     var int egLm1 = eingabe.length() - 1;
     for(var int i=0;i <= egLm1; i++)
     {
        var char zeichen = eingabe.getAt(i);
        ausgabe = ausgabe + cast(int,zeichen) - cast(int,'0'); 
        if( i < egLm1)
        {
           ausgabe = ausgabe * 10;
        }
     }
}





void StringUnitTest::run()
{
    var PrintfClass pfc;
   if(1 == 1)
   {
     var String_16 s1("aa");
     var String_16 s2("aa");
     s1.append(s2);
     if( (s1.length() != 4) || (s1.equals("aaaa") != 1) || (s1.equals("aa") == 1))
     {pfc.fstr("String unittest fail # 1").pr();}
     //pfc.fstr("s1").pr();
     s1.clear();
     s1.append("hurzlipurzligiraffe");
     s1.append(s2);
     if( (s1.length() != 21) || (s1.equals("hurzlipurzligiraffeaa") != 1) || (s1.equals("aa") == 1))
     {pfc.fstr("String unittest fail # 2").pr();}
   }
   if(1 == 1)
   {
     //pfc.fstr("s2").pr();
     var String_16 s1("aa");
     var String_16 s2;
     s2.append("hurzlipurzligiraffe");
     //pfc.fstr("s3").pr();
     s2.append(s1);
     if( (s2.length() != 21) || (s2.equals("hurzlipurzligiraffeaa") != 1) || (s2.equals("aa") == 1))
     {pfc.fstr("String unittest fail # 3").pr();}


   }
   if(1==1)
   {
     var String_16 s1("a");
     var String_16 s2("b");

     for(var int i=0;i<10;i++)
     {
	s1.append(s2);
     }
     if( (s1.length() != 11) || (s1.equals("abbbbbbbbbb") != 1) || (s1.equals("abbbb") == 1))
     {pfc.fstr("String unittest fail # 4").pr();}

   }
   if(1==1)
   {
     var String_16 s1("a");
     var String_16 s2("cc");

     for(var int i=0;i<10;i++)
     {
	s1.append(s2);
     }
     if( (s1.length() != 21) || (s1.equals("acccccccccccccccccccc") != 1) || (s1.equals("abbbb") == 1))
     {pfc.fstr("String unittest fail # 5").pr();}

   }
   if(1==1)
   {
     var String_16 s1("a");
     var String_16 s2("cc");

     for(var int i=0;i<10;i++)
     {
	s1.append(s2);
     }
     if( (s1.length() != 21) || (s1.equals("acccccccccccccccccccc") != 1) || (s1.equals("abbbb") == 1))
     {pfc.fstr("String unittest fail # 5").pr();}

   }
   if(1==1)
   {
     var String_16 s1("acccccccccccccccccccc");
     var String_16 s2("cc");

     for(var int i=0;i<10;i++)
     {
	s1.append(s2);
     }
     if( (s1.length() != 41) || (s1.equals("acccccccccccccccccccccccccccccccccccccccc") != 1) || (s1.equals("abbbb") == 1))
     {pfc.fstr("String unittest fail # 7").pr();}

   }
   if(1==1)
   {
     var String_16 s1("acccccccccccccccccccc");
     var String_16 s2("acccccccccccccccccccc");

     for(var int i=0;i<10;i++)
     {
	s1.append(s2);
     }
     var int expLength=10*21+21;
     if( (s1.length() != expLength) || (s1.equals("abbbb") == 1))
     {pfc.fstr("String unittest fail # 8").pr();}

   }
   if(1==1)
   {
      var String_16 ext;
      var String_16 filename("/home/x.docx");
      filename.rightOf('/',ext);

      if( ext.compare("x.docx") != 1)
      {pfc.fstr("String unittest fail # 88").pr();}

      //pfc.fstr("$").sa(ext).pr();
      filename.rightOf('.',ext);
      if( ext.compare("docx") != 1)
      {pfc.fstr("String unittest fail # 88.2").pr();}
      //pfc.fstr("$").sa(ext).pr();

      filename.assign("/tmp/abc.html");
      filename.rightOf('.',ext);
      if( ext.compare("html") != 1)
      {pfc.fstr("String unittest fail # 88.3").pr();}
      //pfc.fstr("$").sa(ext).pr();
   }
   //pfc.fstr("unittest finished").pr();


   if(1==1)
   {
      var String_16 s;
      s.append("abc");
      s.ensureCapacity(300);
      var int i;
      for(i=0; i < 26;i++)
      {
	 s.append(cast(char,(i+(cast(int,'a')))));
      }
      if(s.equals("abcabcdefghijklmnopqrstuvwxyz") != 1)
      {
	 pfc.fstr("Testcase ensureCapacity() failed").pr();
      }
      //pfc.fstr("$").sa(s).pr(); 
   } 

   if(1 == 1)
   {
       var String_16 s("1234567890123456");
       var String_16 s2;
       var int i;
       for(i=0; i < s.length(); i++)
       {
	  s2.append( s.getAt(i) );
       }
       if( s.equals(s2) != 1 )
       {
	  pfc.fstr("Testcase append(char) failed").pr();
       } 
       s.append('a');
       s.append('b');
       s.append('c');
       s2.clear();
       for(i=0; i < s.length(); i++)
       {
	  s2.append( s.getAt(i) );
       }
       if( s.equals(s2) != 1 )
       {
	  pfc.fstr("Testcase append(char) failed").pr();
       } 
   }
   
   if(1==1)
   {
        var String_16 s1;
        if(s1.equals("") != 1){pfc.fstr("Testcase String constructor failed").pr();} 

        s1.assign("Walther von der Vogelweide war ein Dichter");
        var String_16 s2(s1);
        if(s1.equals("Walther von der Vogelweide war ein Dichter") != 1)
        {pfc.fstr("Testcase String constructor 2 failed").pr();} 
        
   }
}

